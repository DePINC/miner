diff --git a/CMakeLists.txt b/CMakeLists.txt
index d880dc2..f96b81e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -16,26 +16,8 @@ project(chiapos C CXX ASM)
 # CMake 3.14+
 include(FetchContent)
 
-if (${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")
-include(${CMAKE_INSTALL_PREFIX}/share/cmake/pybind11/pybind11Config.cmake)
-else()
-FetchContent_Declare(
-  pybind11-src
-  GIT_REPOSITORY https://github.com/pybind/pybind11.git
-  GIT_TAG        v2.11.1
-)
-FetchContent_MakeAvailable(pybind11-src)
-endif()
-
-FetchContent_Declare(
-  cxxopts
-  GIT_REPOSITORY https://github.com/jarro2783/cxxopts.git
-  GIT_TAG        v3.1.1
-)
-FetchContent_MakeAvailable(cxxopts)
-
-option(CP_LINK_BLADEBIT_HARVESTER "Links libbladebit_harvester at build time instead of dynamically loading it." OFF)
-option(CP_BUILD_BLADEBIT_HARVESTER "Pulls bladebit harvester target from git and builds it as a dependency.")
+option(CP_LINK_BLADEBIT_HARVESTER "Links libbladebit_harvester at build time instead of dynamically loading it." ON)
+option(CP_BUILD_BLADEBIT_HARVESTER "Pulls bladebit harvester target from git and builds it as a dependency." OFF)
 
 if (${CP_BUILD_BLADEBIT_HARVESTER} AND NOT ${CP_LINK_BLADEBIT_HARVESTER})
   set(CP_LINK_BLADEBIT_HARVESTER ON)
@@ -122,12 +104,6 @@ set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O2 -fno-omit-frame-pointer -fsanitize=thre
 set (CMAKE_LINKER_FLAGS "${CMAKE_LINKER_FLAGS} -fno-omit-frame-pointer -fsanitize=thread")
 ENDIF()
 
-pybind11_add_module(chiapos ${CMAKE_CURRENT_SOURCE_DIR}/python-bindings/chiapos.cpp src/chacha8.c)
-add_executable(ProofOfSpace
-    src/cli.cpp
-    src/chacha8.c
-)
-
 FetchContent_Declare(
   blake3
   GIT_REPOSITORY https://github.com/BLAKE3-team/BLAKE3.git
@@ -142,48 +118,20 @@ if(NOT blake3_POPULATED)
   set(BUILD_SHARED_LIBS FALSE CACHE BOOL "Build static libraries" FORCE)
 
   add_subdirectory(${blake3_SOURCE_DIR}/c ${blake3_BINARY_DIR})
+  if (WIN32)
+      BLAKE3_DISABLE_SIMD()
+  endif()
 endif()
 
 set(BLAKE3_SRC ${blake3_SOURCE_DIR}/c)
 set(BLAKE3_INCLUDE_DIR ${blake3_SOURCE_DIR}/c)
+add_library(chiapos STATIC src/chacha8.c)
 target_link_libraries(chiapos PRIVATE blake3)
-target_link_libraries(ProofOfSpace PRIVATE blake3)
 include_directories(
   ${INCLUDE_DIRECTORIES}
   ${BLAKE3_INCLUDE_DIR}
 )
 
-option(BUILD_PROOF_OF_SPACE_STATICALLY "Build ProofOfSpace target statically" OFF)
-IF (BUILD_PROOF_OF_SPACE_STATICALLY)
-  message("Statically build ProofOfSpace")
-  target_link_libraries(ProofOfSpace -static -Wl,--whole-archive -lrt -lpthread -Wl,--no-whole-archive)
-ENDIF()
-
-FetchContent_Declare(
-  Catch2
-  GIT_REPOSITORY https://github.com/catchorg/Catch2.git
-  GIT_TAG        v3.5.2
-)
-FetchContent_MakeAvailable(Catch2)
-
-add_executable(RunTests
-    tests/test.cpp
-    src/chacha8.c
-)
-
-target_link_libraries(RunTests
-    PRIVATE
-    fse
-    Threads::Threads
-    Catch2::Catch2
-    blake3
-)
-
-if(WITH_COVERAGE)
-target_compile_options(RunTests PRIVATE --coverage)
-target_link_options(RunTests PRIVATE --coverage)
-endif()
-
 find_package(Threads REQUIRED)
 
 add_library(uint128 STATIC uint128_t/uint128_t.cpp)
@@ -191,23 +139,40 @@ target_include_directories(uint128 PUBLIC uint128_t)
 
 target_compile_features(fse PUBLIC cxx_std_17)
 target_compile_features(chiapos PUBLIC cxx_std_17)
-# target_compile_features(RunTests PUBLIC cxx_std_17)
 
 target_link_libraries(chiapos PRIVATE fse Threads::Threads
   $<$<CXX_COMPILER_ID:MSVC>:uint128>
   $<$<NOT:$<PLATFORM_ID:Darwin,OpenBSD,FreeBSD,Windows>>:stdc++fs>
 )
-target_link_libraries(ProofOfSpace PRIVATE fse Threads::Threads
-  $<$<CXX_COMPILER_ID:MSVC>:uint128>
-  $<$<NOT:$<PLATFORM_ID:Darwin,OpenBSD,FreeBSD,Windows>>:stdc++fs>
-)
-target_link_libraries(RunTests PRIVATE fse Threads::Threads Catch2::Catch2WithMain
-  $<$<CXX_COMPILER_ID:MSVC>:uint128>
-  $<$<NOT:$<PLATFORM_ID:Darwin,OpenBSD,FreeBSD,Windows>>:stdc++fs>
-)
 
 if (${CP_LINK_BLADEBIT_HARVESTER})
 
+  if (NOT ${CP_BUILD_BLADEBIT_HARVESTER})
+    message(STATUS "Downloading green_reaper release file...")
+    set(GREEN_REAPER_ROOT ${CMAKE_BINARY_DIR}/libs/green_reaper)
+    set(GREEN_REAPER_PREFIX ${CMAKE_CURRENT_BINARY_DIR}/green_reaper-prefix)
+    if (WIN32)
+        message(STATUS "Green reaper (for Windows)")
+        set(GREEN_REAPER_RELEASE_FILE https://github.com/Chia-Network/bladebit/releases/download/v3.1.0/green_reaper-v3.1.0-windows-x86-64.zip)
+    endif()
+    if("${CMAKE_SYSTEM}" MATCHES "Linux")
+        message(STATUS "Green reaper (for Linux)")
+        set(GREEN_REAPER_RELEASE_FILE https://github.com/Chia-Network/bladebit/releases/download/v3.1.0/green_reaper-v3.1.0-linux-x86-64.tar.gz)
+    endif()
+    include(ExternalProject)
+    ExternalProject_Add(green_reaper
+        PREFIX ${GREEN_REAPER_PREFIX}
+        URL ${GREEN_REAPER_RELEASE_FILE}
+        CONFIGURE_COMMAND ""
+        BUILD_COMMAND ""
+        INSTALL_COMMAND mkdir -p ${CMAKE_BINARY_DIR}/libs && cp -R ${GREEN_REAPER_PREFIX}/src/green_reaper ${CMAKE_BINARY_DIR}/libs
+    )
+    include_directories(${GREEN_REAPER_ROOT}/include)
+    target_link_directories(chiapos PUBLIC ${GREEN_REAPER_ROOT}/lib)
+
+    add_dependencies(chiapos green_reaper)
+  Endif()
+
   set(bb_defs
     USE_GREEN_REAPER=1
     BLADEBIT_HARVESTER_LINKED=1
@@ -229,31 +194,12 @@ if (${CP_LINK_BLADEBIT_HARVESTER})
   )
 
   target_compile_definitions(chiapos PUBLIC ${bb_defs})
-  target_compile_definitions(ProofOfSpace PUBLIC ${bb_defs})
-  target_compile_definitions(RunTests PUBLIC ${bb_defs})
 
   target_link_libraries(chiapos PUBLIC ${bb_libs})
-  target_link_libraries(ProofOfSpace PUBLIC ${bb_libs})
-  target_link_libraries(RunTests PUBLIC ${bb_libs})
-
-  target_link_directories(chiapos PUBLIC ${CMAKE_SOURCE_DIR}/libs/green_reaper/lib)
-  target_link_directories(ProofOfSpace PUBLIC ${CMAKE_SOURCE_DIR}/libs/green_reaper/lib)
-  target_link_directories(RunTests PUBLIC ${CMAKE_SOURCE_DIR}/libs/green_reaper/lib)
 
   set_property(TARGET chiapos APPEND PROPERTY BUILD_RPATH "$ORIGIN")
-  set_property(TARGET ProofOfSpace APPEND PROPERTY BUILD_RPATH "$ORIGIN")
-  set_property(TARGET RunTests APPEND PROPERTY BUILD_RPATH "$ORIGIN")
-
-  if (WIN32)
-    add_custom_command(TARGET chiapos POST_BUILD
-        COMMAND ${CMAKE_COMMAND} -E copy_if_different
-        "${CMAKE_SOURCE_DIR}/libs/green_reaper/lib/bladebit_harvester.dll"
-        "$<TARGET_FILE_DIR:chiapos>/bladebit_harvester.dll"
-    )
-    message("The bladebit dll was copied to: $<TARGET_FILE_DIR:chiapos>/bladebit_harvester.dll")
-  endif()
 endif()
 
-
-enable_testing()
-add_test(NAME RunTests COMMAND RunTests)
+install(TARGETS chiapos fse uint128)
+install(DIRECTORY lib DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/chiapos)
+install(DIRECTORY src DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/chiapos)
diff --git a/src/util.hpp b/src/util.hpp
index 0d6c379..d1b43ca 100644
--- a/src/util.hpp
+++ b/src/util.hpp
@@ -35,11 +35,12 @@ template <typename Int, typename Int2>
 constexpr inline Int cdiv(Int a, Int2 b) { return (a + b - 1) / b; }
 
 #ifdef _WIN32
-#define NOMINMAX
 #include <windows.h>
 #include <processthreadsapi.h>
-#include "uint128_t.h"
-#else
+#ifndef _popcnt64
+#define __popcnt64 _popcnt64
+#endif
+#endif
 // __uint__128_t is only available in 64 bit architectures and on certain
 // compilers.
 typedef __uint128_t uint128_t;
@@ -52,8 +53,6 @@ std::ostream &operator<<(std::ostream &strm, uint128_t const &v)
     return strm;
 }
 
-#endif
-
 // compiler-specific byte swap macros.
 #if defined(_MSC_VER)
 
@@ -364,7 +363,7 @@ namespace Util {
     inline uint64_t PopCount(uint64_t n)
     {
 #if defined(_WIN32)
-        return __popcnt64(n);
+        return _popcnt64(n);
 #elif defined(__x86_64__)
         uint64_t r;
         __asm__("popcnt %1, %0" : "=r"(r) : "r"(n));
